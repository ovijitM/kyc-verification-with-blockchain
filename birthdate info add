// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

struct nid{
        bytes32 name;
        uint id;
        address add;
        uint birthdate;
    }

contract KYC{

    mapping(address=>nid) internal details;
    mapping(uint=>bool) internal usedIds;
    mapping(address=>bool) internal usedAddresses;

    function setdts(string memory _name,uint _id, address _add, uint _birthdate) public {
        require(!usedIds[_id], "This ID has already been used");
        require(!usedAddresses[_add], "This address has already been used");
        details[_add]=nid(sha256(abi.encodePacked(_name)),_id,_add, _birthdate);
        usedIds[_id] = true;
        usedAddresses[_add] = true;
    }
    function checkczdts(address _address) public view returns(nid memory){
        return details[_address];
    }

    function updateDts(string memory _name, uint _id, address _add, uint _birthdate) public {
        nid memory storedDetails = details[_add];
        require(storedDetails.id == _id, "ID does not match");
        bytes32 nameHash = sha256(abi.encodePacked(_name));
        if (storedDetails.name != nameHash) {
            usedIds[storedDetails.id] = false;
            details[_add]=nid(nameHash,_id,_add, _birthdate);
            usedIds[_id] = true;
        }
    }
    
}

contract verification{

    KYC KYCcontract;

    constructor(address _contract) {
        KYCcontract=KYC(_contract);
    }

  function submitdts(string memory _name, uint _id, address _add, uint _birthdate) public  view returns (bool) {
    nid memory storedDetails = KYCcontract.checkczdts(_add);
    bytes32 nameHash = sha256(abi.encodePacked(_name));
    if (storedDetails.id == _id && storedDetails.name == nameHash && storedDetails.birthdate == _birthdate) {
        return true;
    }
    return false;
  }
}
